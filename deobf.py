#!/usr/bin/env python3

import argparse
import sys
import os
import time
import ast
import zlib
import base64
import marshal

def decode_mzb(x: str) -> str:
    eval_str: str = ast.parse(x).body[1].value.args[0].value # type: ignore

    bytes_payload: str = ast.parse(eval_str).body[0].value.args[0].args[0].value # type: ignore

    output = bytes_payload[::-1] # type: ignore
    output = base64.b85decode(output) # type: ignore
    output = zlib.decompress(output)
    output = marshal.loads(output)

    return output.decode()

def decode_zb(x: str) -> str:
    eval_str: str = ast.parse(x).body[1].value.args[0].args[0].value # type: ignore

    output = eval_str[::-1] # type: ignore
    output = base64.b64decode(output) # type: ignore
    output = zlib.decompress(output)

    return output.decode()

def decode_exec(x: str) -> str:
    eval_str: str = ast.parse(x).body[0].value.args[0].args[0].value # type: ignore

    output = eval_str[::-1] # type: ignore
    output = base64.b64decode(output) # type: ignore
    output = zlib.decompress(output)

    return output.decode()

def iteration(x: str, current_iter: int, debug: bool, debug_dir: str | None, max_iter: int | None) -> str:
    if max_iter and current_iter > max_iter:
        return x

    if "_1nf3r10r_ = lambda __1nf3r10r__" in x:
        f = decode_mzb
    elif "_ = lambda __" in x:
        f = decode_zb
    elif "exec((_)" in x:
        f = decode_exec
    else:
        return x

    time_start = time.time_ns()
    decoded = f(x)
    time_stop = time.time_ns()

    elapsed_ms = (time_stop - time_start) // 1_000_000
    if debug:
        sys.stderr.write("Iteration {}: {}, took {} ms\n".format(current_iter, f.__name__, elapsed_ms))

        if debug_dir:
            debug_file = open(os.path.join(debug_dir, str(current_iter) + ".py"), "w")
            debug_file.write(decoded)
            debug_file.close()

    return iteration(decoded, current_iter + 1, debug, debug_dir, max_iter)

def remove_comments(x: str) -> str:
    comment_b64 = ""
    comment = base64.b64decode(comment_b64).decode()

    return x.replace(comment, "")

def cli(input_filename: str, output_filename: str, debug: bool, debug_dir: str | None, max_iter: int | None):
    input_file = sys.stdin
    if input_filename not in ["-", "stdin"]:
        input_file = open(input_filename, "r")

    input_source = input_file.read()

    if input_filename not in ["-", "stdin"]:
        input_file.close()

    ds = iteration(input_source, 1, debug, debug_dir, max_iter)
    ds = remove_comments(ds)

    output_file = sys.stdout
    if output_filename != "stdout":
        output_file = open(output_filename, "w")

    output_file.write(ds)

    if output_filename != "stdout":
        output_file.close()

def gui(debug: bool):
    raise Exception("work in progress!")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A script to deobfuscate Python scripts")
    parser.add_argument("input", type=str, nargs="?", default="stdin", help="Input filename")
    parser.add_argument("-o", "--output", type=str, default="stdout", help="Output filename (if not existent, will create)")
    parser.add_argument("-i", "--max-iter", type=int, help="Max iterations")
    parser.add_argument("--gui", action="store_true", help="Enable GUI")
    parser.add_argument("--debug", action="store_true", help="Print debug information")
    parser.add_argument("--debug-dir", type=str, help="Path to the debug directory")
    args = parser.parse_args()

    if args.debug:
        sys.stderr.write("args: {}\n".format(args))

    try:
        if args.gui:
            gui(args.debug)
        elif args.input:
            cli(args.input, args.output, args.debug, args.debug_dir, args.max_iter)
        else:
            raise Exception("no input file")
    except Exception as e:
        parser.error(str(e))